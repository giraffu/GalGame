// This source code was auto-generated by ToLua#, do not modify it
using System;
using LuaInterface;

public class Nova_DialogueBoxControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nova.DialogueBoxController), typeof(Nova.PanelController));
		L.RegFunction("ShowDialogueFinishIcon", ShowDialogueFinishIcon);
		L.RegFunction("OnDialogueWillChange", OnDialogueWillChange);
		L.RegFunction("DisplayDialogue", DisplayDialogue);
		L.RegFunction("NewPage", NewPage);
		L.RegFunction("OnCloseButtonClick", OnCloseButtonClick);
		L.RegFunction("SetTextAnimationDelay", SetTextAnimationDelay);
		L.RegFunction("OverrideTextDuration", OverrideTextDuration);
		L.RegFunction("OverrideTextScroll", OverrideTextScroll);
		L.RegFunction("SetTextScroll", SetTextScroll);
		L.RegFunction("GetTextScrollAnimationProperty", GetTextScrollAnimationProperty);
		L.RegFunction("NextPageOrStep", NextPageOrStep);
		L.RegFunction("ForceStep", ForceStep);
		L.RegFunction("FindIntersectingLink", FindIntersectingLink);
		L.RegFunction("GetRestoreData", GetRestoreData);
		L.RegFunction("Restore", Restore);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("luaGlobalName", get_luaGlobalName, set_luaGlobalName);
		L.RegVar("textColorHasSet", get_textColorHasSet, set_textColorHasSet);
		L.RegVar("avatar", get_avatar, null);
		L.RegVar("rect", get_rect, null);
		L.RegVar("backgroundColor", get_backgroundColor, set_backgroundColor);
		L.RegVar("configOpacity", get_configOpacity, set_configOpacity);
		L.RegVar("isCurrent", get_isCurrent, null);
		L.RegVar("characterFadeInDuration", get_characterFadeInDuration, set_characterFadeInDuration);
		L.RegVar("textAlignment", get_textAlignment, set_textAlignment);
		L.RegVar("textColor", get_textColor, set_textColor);
		L.RegVar("materialName", get_materialName, set_materialName);
		L.RegVar("canRefreshTextProxy", get_canRefreshTextProxy, set_canRefreshTextProxy);
		L.RegVar("closeButtonShown", get_closeButtonShown, set_closeButtonShown);
		L.RegVar("dialogueFinishIconShown", get_dialogueFinishIconShown, null);
		L.RegVar("restorableName", get_restorableName, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowDialogueFinishIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ShowDialogueFinishIcon(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDialogueWillChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			obj.OnDialogueWillChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisplayDialogue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			Nova.DialogueDisplayData arg0 = (Nova.DialogueDisplayData)ToLua.CheckObject<Nova.DialogueDisplayData>(L, 2);
			obj.DisplayDialogue(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewPage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			obj.NewPage();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCloseButtonClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			obj.OnCloseButtonClick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextAnimationDelay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetTextAnimationDelay(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverrideTextDuration(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.OverrideTextDuration(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverrideTextScroll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			obj.OverrideTextScroll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextScroll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetTextScroll(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextScrollAnimationProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			Nova.RectTransformAnimationProperty o = obj.GetTextScrollAnimationProperty(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NextPageOrStep(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			bool o = obj.NextPageOrStep();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceStep(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			obj.ForceStep();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindIntersectingLink(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject(L, 3, typeof(UnityEngine.Camera));
			string o = obj.FindIntersectingLink(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRestoreData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			Nova.IRestoreData o = obj.GetRestoreData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)ToLua.CheckObject<Nova.DialogueBoxController>(L, 1);
			Nova.IRestoreData arg0 = (Nova.IRestoreData)ToLua.CheckObject<Nova.IRestoreData>(L, 2);
			obj.Restore(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaGlobalName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			string ret = obj.luaGlobalName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaGlobalName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textColorHasSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			bool ret = obj.textColorHasSet;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textColorHasSet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_avatar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			Nova.AvatarController ret = obj.avatar;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index avatar on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			UnityEngine.RectTransform ret = obj.rect;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_backgroundColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			UnityEngine.Color ret = obj.backgroundColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index backgroundColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_configOpacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			float ret = obj.configOpacity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index configOpacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isCurrent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			bool ret = obj.isCurrent;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isCurrent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_characterFadeInDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			float ret = obj.characterFadeInDuration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index characterFadeInDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textAlignment(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			TMPro.TextAlignmentOptions ret = obj.textAlignment;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textAlignment on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			UnityEngine.Color ret = obj.textColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_materialName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			string ret = obj.materialName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index materialName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canRefreshTextProxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			bool ret = obj.canRefreshTextProxy;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canRefreshTextProxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_closeButtonShown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			bool ret = obj.closeButtonShown;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index closeButtonShown on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dialogueFinishIconShown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			bool ret = obj.dialogueFinishIconShown;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dialogueFinishIconShown on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_restorableName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			string ret = obj.restorableName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index restorableName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaGlobalName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.luaGlobalName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaGlobalName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textColorHasSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.textColorHasSet = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textColorHasSet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_backgroundColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.backgroundColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index backgroundColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_configOpacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.configOpacity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index configOpacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_characterFadeInDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.characterFadeInDuration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index characterFadeInDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textAlignment(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			TMPro.TextAlignmentOptions arg0 = (TMPro.TextAlignmentOptions)ToLua.CheckObject(L, 2, typeof(TMPro.TextAlignmentOptions));
			obj.textAlignment = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textAlignment on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.textColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_materialName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.materialName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index materialName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canRefreshTextProxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.canRefreshTextProxy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canRefreshTextProxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_closeButtonShown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.DialogueBoxController obj = (Nova.DialogueBoxController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.closeButtonShown = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index closeButtonShown on a nil value");
		}
	}
}

